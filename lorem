#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use FindBin qw($Bin);
use lib "$Bin/lib";
#use lib '/usr/local/ActivePerl-5.16/site/lib/'; ##
use GetData;
use GetSwitch;
use Data::Dumper;

## get options
my %arguments;

$arguments{'help'}=0;
$arguments{'data_dir'}="./data";
$arguments{'out_dir'}="./html";
$arguments{'threshold_gexp'}=0.01;
$arguments{'tool'}="";

GetOptions(
	\%arguments, 
	'help|h',
	'tool|t=s',
        'data_dir|d:s',
        'species|s:s',
        'ensembl_v|e:i',
        'input|i=s',
        'out_dir|o=s',
        'cond1|c1=s',
        'cond2|c2=s',
        'threshold_gexp|g=f'
) or die pod2usage(
	-input => "$Bin/doc/lorem.pod",
	-verbose => 1
);

## process user options
if (defined($arguments{'tool'}) and $arguments{'tool'} eq "get_data") {
	## check for required arguments
	if ($arguments{'help'} or
		!defined($arguments{'species'}) or
		!defined($arguments{'ensembl_v'})) {
		
		die pod2usage(
			-input => "$Bin/doc/get_data.pod",
			-verbose => 1
		);
	}

	## check for species
	unless ($arguments{'species'} eq "hsa" 
		or $arguments{'species'} eq "mmu"
		or $arguments{'species'} eq "dre"
		or $arguments{'species'} eq "rno") {
		my $message="Pre-compiled data available only for human (hsa), mouse (mmu), rat (rno) and zebrafish (dre).\n".
				"Refer to the project's wiki for further information on how to proceed with other species:\n".
				"\thttps://github.com/mgonzalezporta/lorem/wiki/Tutorial\n";
		die $message;
	}

	## finally, get the data
	get_data(\%arguments);

} elsif (defined($arguments{'tool'}) and $arguments{'tool'} eq "get_switch") {
	## check for required arguments
	if ($arguments{'help'} or 
		!defined($arguments{'species'}) or 
		!defined($arguments{'ensembl_v'}) or
		!defined($arguments{'input'}) or
		!defined($arguments{'cond1'}) or 
		!defined($arguments{'cond2'})) {

		die pod2usage(
			-input => "$Bin/doc/get_switch.pod",
			-verbose => 1
		);	
	}

	## check input arguments
	unless (-e $arguments{'input'}) {
		die("Cannot open $arguments{'input'}: $!\n");
	}

	my @cond1=split("-", $arguments{'cond1'});
	my @cond2=split("-", $arguments{'cond2'});
	unless ($arguments{'cond1'} =~ /\d+-\d+/ and 
			$arguments{'cond2'} =~ /\d+-\d+/ and 
			$cond1[0]<=$cond1[1] and 
			$cond2[0]<=$cond2[1]) {
				my $message="Wrong format for column intervals.\n".
							"Print help: lorem -tool get_switch -h\n";
				die $message;
	}
	unless ($cond1[0]>2) {
		my $message="Invalid interval for --cond1: the first two columns must contain gene and transcript ids.\n".
					"Print help: lorem -tool get_switch -h\n";
		die $message;
	}
	unless ($cond1[1]+1==$cond2[0]) {
		my $message="Warning: Inconsistency detected in the column interval definitions.\n".
					"         Please check --cond1 and --cond2.\n";
		warn $message;
	}

	unless ( -e $arguments{'data_dir'} and 
			 -e "$arguments{'data_dir'}/$arguments{'species'}.$arguments{'ensembl_v'}" ) {
				my $message="Cannot find data directory:\n".
							"   $arguments{'data_dir'}/$arguments{'species'}.$arguments{'ensembl_v'}\n".
							"Data should be downloaded first:\n".
							"\tlorem -t get_data -h\n".
							"\thttps://github.com/mgonzalezporta/lorem/wiki/Tutorial\n";
				die $message;
	}
	
	## finally, find switch events
	get_switch(\%arguments);

} elsif ($arguments{'help'}) {
	## print doc - long version
	die pod2usage(
		-input => "$Bin/doc/lorem.pod",
		-verbose => 99,
	    -sections => "NAME|VERSION|SYNOPSIS|OPTIONS" );

} else {
	## print doc - short version
	die pod2usage(
		-input => "$Bin/doc/lorem.pod",
		-verbose => 1
	);
}
